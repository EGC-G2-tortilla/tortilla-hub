import nextcord
import logging
from nextcord.ext import commands
from nextcord import Embed, Colour
from dotenv import load_dotenv
from app.modules.dataset.services import DataSetService, AuthorService
from app.modules.featuremodel.services import FeatureModelService
from app.modules.auth.services import AuthenticationService
import os
import matplotlib.pyplot as plt
import io
from app import app
import textwrap

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("nextcord")
handler = logging.FileHandler(filename="discord.log", encoding="utf-8", mode="w")
handler.setFormatter
logger.addHandler(handler)

bot = commands.Bot()

dataset_service = DataSetService()
feature_model_service = FeatureModelService()
auth_service = AuthenticationService()
author_service = AuthorService()

DOMAIN = os.getenv("DOMAIN")


@bot.event
async def on_ready():
    try:
        # Sincroniza comandos globales
        await bot.sync_application_commands()
        print("Comandos globales sincronizados.")

    except Exception as e:
        print(f"Error al sincronizar comandos: {e}")

    print(f"Bot conectado como {bot.user}!")


@bot.event
async def on_guild_join(guild):
    general_channel = next(
        (
            channel
            for channel in guild.text_channels
            if channel.permissions_for(guild.me).send_messages
        ),
        None,
    )
    if general_channel:
        embed = Embed(
            title="¬°Gracias por a√±adirme! üéâ",
            description=(
                "¬°Hola a todos! üéâ \n"
                "Gracias por a√±adirme. Soy un bot dise√±ado para ayudarte con algunas utilidades de uvlhub "
                "como gestionar datasets y m√°s.\n"
                "Usa /help para ver mis comandos disponibles. ¬°Empecemos! üöÄ"
            ),
            colour=Colour.blue(),
        )
        embed.set_footer(text="Usa /help para m√°s informaci√≥n.")
        await general_channel.send(embed=embed)


@bot.slash_command(name="help", description="Muestra los comandos disponibles")
async def help(interaction: nextcord.Interaction):
    # Define las categor√≠as de comandos
    commands_info = {
        "üìÇ Gesti√≥n de Datasets": [
            {"name": "/most_downloaded", "description": "Dataset m√°s descargado."},
            {"name": "/datasets", "description": "Muestra los datasets disponibles."},
            {
                "name": "/datasets_counter",
                "description": "Cuenta de datasets sincronizados.",
            },
        ],
        "üìä Estad√≠sticas Generales": [
            {
                "name": "/total_dataset_downloads",
                "description": "Total de descargas de datasets.",
            },
            {
                "name": "/total_dataset_views",
                "description": "Total de vistas de datasets.",
            },
        ],
        "üîß Modelos de Caracter√≠sticas": [
            {
                "name": "/feature_models_counter",
                "description": "Cuenta de modelos de caracter√≠sticas.",
            },
            {
                "name": "/total_feature_model_downloads",
                "description": "Total de descargas de modelos de caracter√≠sticas.",
            },
            {
                "name": "/total_feature_model_views",
                "description": "Total de vistas de modelos de caracter√≠sticas.",
            },
        ],
        "üìö Autores": [
            {
                "name": "/most_popular_authors",
                "description": "Muestra los autores m√°s populares.",
            },
        ],
    }

    # Crear un embed principal
    embed = nextcord.Embed(
        title="üìñ Ayuda del Bot",
        description=(
            "Aqu√≠ tienes la lista de comandos disponibles para interactuar con este bot.\n\n"
            "Cada comando est√° organizado por categor√≠a. Usa el comando que desees ¬°y comienza a explorar! üöÄ\n\n"
            "Si tienes dudas o problemas, contacta con los administradores del bot. üòä"
        ),
        colour=nextcord.Colour.blue(),
    )
    embed.set_footer(text="Gracias por usar el bot. ¬°Disfruta explorando tus datos!")

    # A√±adir comandos por categor√≠a
    for category, commands in commands_info.items():
        commands_list = "\n".join(
            [f"**{cmd['name']}**: {cmd['description']}" for cmd in commands]
        )
        embed.add_field(name=category, value=commands_list, inline=False)

    # Responder con el embed
    await interaction.response.send_message(embed=embed)


@bot.slash_command(name="most_downloaded", description="Dataset m√°s descargado")
async def most_downloaded(interaction: nextcord.Interaction):
    with app.app_context():
        # Consulta de los datasets m√°s descargados
        consult = dataset_service.most_downloaded()
        # Obt√©n los 4 m√°s descargados
        top_datasets = sorted(consult, key=lambda x: x["downloads"], reverse=True)[:4]

        # Extrae nombres y descargas
        names = [dataset["name"] for dataset in top_datasets]
        downloads = [dataset["downloads"] for dataset in top_datasets]

        # Ajustar nombres largos
        wrapped_names = [textwrap.fill(name, width=10) for name in names]

        # Crear colores distintos para cada barra
        colors = plt.cm.tab10(range(len(wrapped_names)))

        # Crear el gr√°fico de barras
        plt.figure(figsize=(8, 6))
        bars = plt.bar(range(len(wrapped_names)), downloads, color=colors)

        # Agregar etiquetas encima de las barras
        for bar, download in zip(bars, downloads):
            plt.text(
                bar.get_x() + bar.get_width() / 2,  # Posici√≥n horizontal
                bar.get_height() + 0.1,  # Posici√≥n vertical
                str(download),  # Valor a mostrar
                ha="center",
                va="bottom",
                fontsize=10,
            )

        plt.title("Top 4 Datasets M√°s Descargados", fontsize=14, pad=20)
        plt.xlabel("Datasets", fontsize=12)
        plt.ylabel("Descargas", fontsize=12)
        plt.yticks(range(0, max(downloads) + 1, 1))
        plt.xticks(range(len(wrapped_names)), wrapped_names, rotation=45, ha="right")

        # Guardar el gr√°fico en un buffer de memoria
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png", bbox_inches="tight")
        buffer.seek(0)
        plt.close()

        # Crear un embed
        embed = nextcord.Embed(
            title="Gr√°fico de descargas üìä",
            description=(
                "A continuaci√≥n se muestra un gr√°fico de los **4 datasets m√°s populares** seg√∫n el n√∫mero de descargas totales:\n\n"
                "‚Ä¢ Cada barra representa un dataset con un color √∫nico.\n"
                "‚Ä¢ Los nombres de los datasets est√°n ajustados para encajar.\n"
                "‚Ä¢ Los valores en la parte superior de cada barra muestran el total de descargas.\n\n"
                "‚¨áÔ∏è **Explora los resultados a continuaci√≥n:** ‚¨áÔ∏è"
            ),
            color=nextcord.Color.purple(),
        )

        # Enviar el gr√°fico como archivo adjunto
        file = nextcord.File(buffer, filename="top_datasets.png")
        embed.set_image(url="attachment://top_datasets.png")

        await interaction.response.send_message(embed=embed, file=file)


@bot.slash_command(
    name="datasets_counter", description="Cuenta de datasets sincronizados"
)
async def datasets_counter(interaction: nextcord.Interaction):
    with app.app_context():
        count = dataset_service.count_synchronized_datasets()

        embed = nextcord.Embed(
            title="Total de Datasets Sincronizados üóÇÔ∏è",
            description=(
                f"Actualmente hay **{count} datasets sincronizados** en la base de datos.\n\n"
                "üîç Puedes explorar los datasets disponibles usando otros comandos como: \n - /datasets\n"
                "üöÄ ¬°Sigue gestionando y explorando tus datasets con facilidad!"
            ),
            color=nextcord.Color.purple(),
        )

        await interaction.response.send_message(embed=embed)


@bot.slash_command(
    name="feature_models_counter", description="Cuenta de modelos de caracter√≠sticas"
)
async def feature_models_counter(interaction: nextcord.Interaction):
    with app.app_context():
        count = feature_model_service.count_feature_models()

        embed = nextcord.Embed(
            title="Total de Modelos de Caracter√≠sticas üîß",
            description=(
                f"Actualmente hay **{count} modelos de caracter√≠sticas** registrados en la base de datos.\n\n"
                "üí° Los modelos de caracter√≠sticas pueden ser utilizados para mejorar tus datasets.\n"
                "üîç Explora y gestiona los modelos disponibles con otros comandos."
            ),
            color=nextcord.Color.green(),
        )

        await interaction.response.send_message(embed=embed)


@bot.slash_command(
    name="total_dataset_downloads", description="Total de descargas de datasets"
)
async def total_dataset_downloads(interaction: nextcord.Interaction):
    with app.app_context():
        total_downloads = dataset_service.total_dataset_downloads()

        embed = nextcord.Embed(
            title="Total de Descargas de Datasets üìä",
            description=(
                f"En total, los datasets han sido descargados **{total_downloads} veces**.\n\n"
                "üì• Las descargas de datasets son una medida importante para ver qu√© tan populares son los recursos disponibles.\n"
                "üîç Explora m√°s comandos para conocer detalles adicionales sobre los datasets."
            ),
            color=nextcord.Color.orange(),
        )

        await interaction.response.send_message(embed=embed)


# Total de descargas de modelos de caracter√≠sticas
@bot.slash_command(
    name="total_feature_model_downloads",
    description="üìà Total de descargas de modelos de caracter√≠sticas",
)
async def total_feature_model_downloads(interaction: nextcord.Interaction):
    with app.app_context():
        total_downloads = feature_model_service.total_feature_model_downloads()
        embed = Embed(
            title="üìä Total de Descargas de Modelos de Caracter√≠sticas",
            description=f"Nuestros modelos de caracter√≠sticas han sido descargados un total de **{total_downloads} veces**. ¬°Gracias por tu inter√©s! üåü",
            colour=Colour.green(),
        )
        await interaction.response.send_message(embed=embed)


# Total de vistas de datasets
@bot.slash_command(
    name="total_dataset_views", description="üëÄ Total de vistas de datasets"
)
async def total_dataset_views(interaction: nextcord.Interaction):
    with app.app_context():
        total_views = dataset_service.total_dataset_views()
        embed = Embed(
            title="üëÄ Total de Vistas de Datasets",
            description=f"Nuestros datasets han sido vistos un total de **{total_views} veces**. ¬°Estamos felices de que explores nuestros datos! üîç",
            colour=Colour.orange(),
        )
        await interaction.response.send_message(embed=embed)


# Total de vistas de modelos de caracter√≠sticas
@bot.slash_command(
    name="total_feature_model_views",
    description="üîç Total de vistas de modelos de caracter√≠sticas",
)
async def total_feature_model_views(interaction: nextcord.Interaction):
    with app.app_context():
        total_views = feature_model_service.total_feature_model_views()
        embed = Embed(
            title="üîç Total de Vistas de Modelos de Caracter√≠sticas",
            description=f"Nuestros modelos de caracter√≠sticas han sido vistos **{total_views} veces**. ¬°Nos encanta compartir conocimiento contigo! üìò",
            colour=Colour.green(),
        )
        await interaction.response.send_message(embed=embed)


# DatasetView - Navegaci√≥n de datasets mejorada
class DatasetView(nextcord.ui.View):
    def __init__(self, datasets):
        super().__init__()
        self.datasets = datasets
        self.current_page = 0

    async def update_message(self, interaction):
        dataset = self.datasets[self.current_page]
        embed = Embed(
            title=f"üìÇ Dataset: {dataset['name']}",
            description="Aqu√≠ tienes m√°s informaci√≥n sobre este dataset:",
            colour=Colour.purple(),
        )
        embed.add_field(
            name="üßë‚Äçüíª Autor/es",
            value=(
                ", ".join(dataset["authors"]) if dataset["authors"] else "No disponible"
            ),
            inline=True,
        )
        embed.add_field(
            name="üìÖ Fecha de Creaci√≥n", value=dataset["created_at"], inline=True
        )
        embed.set_footer(text=f"P√°gina {self.current_page + 1}/{len(self.datasets)}")
        await interaction.response.edit_message(embed=embed, view=self)

    @nextcord.ui.button(label="Anterior", style=nextcord.ButtonStyle.primary)
    async def prev(self, button, interaction):
        if self.current_page > 0:
            self.current_page -= 1
            await self.update_message(interaction)

    @nextcord.ui.button(label="Descargar", style=nextcord.ButtonStyle.success)
    async def download(self, button, interaction):
        dataset = self.datasets[self.current_page]
        download_url = DOMAIN + f"/dataset/download/{dataset['id']}"
        await interaction.response.send_message(
            f"üì• [Haz clic aqu√≠ para descargar el dataset]({download_url})",
            ephemeral=True,
        )

    @nextcord.ui.button(label="Descargar todos", style=nextcord.ButtonStyle.success)
    async def download_all(self, button, interaction):
        download_url = DOMAIN + "/dataset/download_all"
        await interaction.response.send_message(
            f"üì• [Haz clic aqu√≠ para descargar todos los datasets disponibles]({download_url})",
            ephemeral=True,
        )

    @nextcord.ui.button(label="Siguiente", style=nextcord.ButtonStyle.primary)
    async def next(self, button, interaction):
        if self.current_page < len(self.datasets) - 1:
            self.current_page += 1
            await self.update_message(interaction)


# Comando datasets
@bot.slash_command(name="datasets", description="üìö Muestra los datasets disponibles")
async def show_datasets(interaction: nextcord.Interaction):
    with app.app_context():
        datasets = dataset_service.get_all_datasets()
        formatted_datasets = [
            {
                "id": dataset.id,
                "name": dataset.name(),
                "created_at": dataset.created_at.strftime("%d/%m/%Y"),
                "authors": [
                    author.to_dict()["name"] for author in dataset.ds_meta_data.authors
                ],
            }
            for dataset in datasets
        ]

        view = DatasetView(formatted_datasets)
        dataset = formatted_datasets[0]
        embed = Embed(
            title=f"üìÇ Dataset: {dataset['name']}",
            description="Aqu√≠ tienes informaci√≥n sobre el primer dataset:",
            color=nextcord.Color.purple(),
        )
        embed.add_field(
            name="üßë‚Äçüíª Autor/es",
            value=(
                ", ".join(dataset["authors"]) if dataset["authors"] else "No disponible"
            ),
            inline=True,
        )
        embed.add_field(
            name="üìÖ Fecha de Creaci√≥n", value=dataset["created_at"], inline=True
        )
        embed.set_footer(text=f"P√°gina 1/{len(formatted_datasets)}")
        await interaction.response.send_message(embed=embed, view=view)


@bot.slash_command(
    name="most_popular_authors", description="üìö Muestra los autores m√°s populares"
)
async def most_popular_authors(interaction: nextcord.Interaction):
    with app.app_context():
        # Obt√©n los autores m√°s populares desde el servicio
        most_popular_authors = author_service.most_popular_authors()

        # Verifica si hay autores disponibles
        if not most_popular_authors:
            await interaction.response.send_message(
                "No hay datos sobre autores populares en este momento. üòî",
                ephemeral=True,
            )
            return

        # Formatear los datos de los autores en una lista
        embed = Embed(
            title="üìö Autores M√°s Populares",
            description="Aqu√≠ tienes la lista de los autores m√°s destacados basados en sus descargas:",
            colour=Colour.yellow(),
        )

        for author in most_popular_authors:
            # A√±ade cada autor como un campo en el embed
            embed.add_field(
                name=f"üë§ {author['name']}",
                value=f"**Descargas:** {author['downloads']}",
                inline=False,  # Muestra cada autor en una l√≠nea separada
            )

        embed.set_footer(text="Gracias por apoyar a nuestros creadores. üåü")

        # Env√≠a el embed
        await interaction.response.send_message(embed=embed)


if __name__ == "__main__":
    bot.run(os.getenv("DISCORD_BOT_TOKEN"))
